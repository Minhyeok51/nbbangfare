{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\git\\\\nbbangfare\\\\nbbanfare\\\\src\\\\main\\\\frontend\\\\src\\\\component\\\\Post.js\";\nimport React, { useEffect, useState } from \"react\";\nimport DaumPostcode from \"react-daum-postcode\";\nimport '../css/join.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = props => {\n  const complete = data => {\n    // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\n    props.setcompany({\n      ...props.company,\n      address: data\n    });\n\n    // 각 주소의 노출 규칙에 따라 주소를 조합한다.\n    // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\n    var addr = ''; // 주소 변수\n    var extraAddr = ''; // 참고항목 변수\n\n    //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\n    if (data.userSelectedType === 'R') {\n      // 사용자가 도로명 주소를 선택했을 경우\n      addr = data.roadAddress;\n    } else {\n      // 사용자가 지번 주소를 선택했을 경우(J)\n      addr = data.jibunAddress;\n    }\n\n    // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\n    if (data.userSelectedType === 'R') {\n      // 법정동명이 있을 경우 추가한다. (법정리는 제외)\n      // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\n      if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {\n        extraAddr += data.bname;\n      }\n      // 건물명이 있고, 공동주택일 경우 추가한다.\n      if (data.buildingName !== '' && data.apartment === 'Y') {\n        extraAddr += extraAddr !== '' ? ', ' + data.buildingName : data.buildingName;\n      }\n      // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\n      if (extraAddr !== '') {\n        extraAddr = ' (' + extraAddr + ')';\n      }\n      // 조합된 참고항목을 해당 필드에 넣는다.\n      document.getElementById(\"extraAddress\").value = extraAddr;\n    } else {\n      document.getElementById(\"extraAddress\").value = '';\n    }\n\n    // 우편번호와 주소 정보를 해당 필드에 넣는다.\n    document.getElementById('postcode').value = data.zonecode;\n    document.getElementById(\"address\").value = addr;\n    // 커서를 상세주소 필드로 이동한다.\n    document.getElementById(\"detailAddress\").focus();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DaumPostcode, {\n      className: \"postmodal\",\n      autoClose: true,\n      onComplete: complete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useEffect","useState","DaumPostcode","Post","props","complete","data","setcompany","company","address","addr","extraAddr","userSelectedType","roadAddress","jibunAddress","bname","test","buildingName","apartment","document","getElementById","value","zonecode","focus"],"sources":["C:/Users/User/git/nbbangfare/nbbanfare/src/main/frontend/src/component/Post.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport DaumPostcode from \"react-daum-postcode\";\r\nimport '../css/join.css'\r\n\r\nconst Post = (props) => {\r\n\r\n    const complete = (data) =>{\r\n       // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n       props.setcompany({\r\n        ...props.company,\r\n        address:data,\r\n    })\r\n\r\n                // 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n                // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n                var addr = ''; // 주소 변수\r\n                var extraAddr = ''; // 참고항목 변수\r\n\r\n                //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n                if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n                    addr = data.roadAddress;\r\n                } else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n                    addr = data.jibunAddress;\r\n                }\r\n\r\n                // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\r\n                if(data.userSelectedType === 'R'){\r\n                    // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n                    // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n                    if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\r\n                        extraAddr += data.bname;\r\n                    }\r\n                    // 건물명이 있고, 공동주택일 경우 추가한다.\r\n                    if(data.buildingName !== '' && data.apartment === 'Y'){\r\n                        extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n                    }\r\n                    // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n                    if(extraAddr !== ''){\r\n                        extraAddr = ' (' + extraAddr + ')';\r\n                    }\r\n                    // 조합된 참고항목을 해당 필드에 넣는다.\r\n                    document.getElementById(\"extraAddress\").value = extraAddr;\r\n                \r\n                } else {\r\n                    document.getElementById(\"extraAddress\").value = '';\r\n                }\r\n                \r\n                // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n                document.getElementById('postcode').value = data.zonecode;\r\n                document.getElementById(\"address\").value = addr;\r\n                // 커서를 상세주소 필드로 이동한다.\r\n                document.getElementById(\"detailAddress\").focus();\r\n                \r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <DaumPostcode\r\n                className=\"postmodal\"\r\n                autoClose\r\n                onComplete={complete} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAO,iBAAiB;AAAA;AAExB,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAEpB,MAAMC,QAAQ,GAAIC,IAAI,IAAI;IACvB;IACAF,KAAK,CAACG,UAAU,CAAC;MAChB,GAAGH,KAAK,CAACI,OAAO;MAChBC,OAAO,EAACH;IACZ,CAAC,CAAC;;IAEU;IACA;IACA,IAAII,IAAI,GAAG,EAAE,CAAC,CAAC;IACf,IAAIC,SAAS,GAAG,EAAE,CAAC,CAAC;;IAEpB;IACA,IAAIL,IAAI,CAACM,gBAAgB,KAAK,GAAG,EAAE;MAAE;MACjCF,IAAI,GAAGJ,IAAI,CAACO,WAAW;IAC3B,CAAC,MAAM;MAAE;MACLH,IAAI,GAAGJ,IAAI,CAACQ,YAAY;IAC5B;;IAEA;IACA,IAAGR,IAAI,CAACM,gBAAgB,KAAK,GAAG,EAAC;MAC7B;MACA;MACA,IAAGN,IAAI,CAACS,KAAK,KAAK,EAAE,IAAI,WAAW,CAACC,IAAI,CAACV,IAAI,CAACS,KAAK,CAAC,EAAC;QACjDJ,SAAS,IAAIL,IAAI,CAACS,KAAK;MAC3B;MACA;MACA,IAAGT,IAAI,CAACW,YAAY,KAAK,EAAE,IAAIX,IAAI,CAACY,SAAS,KAAK,GAAG,EAAC;QAClDP,SAAS,IAAKA,SAAS,KAAK,EAAE,GAAG,IAAI,GAAGL,IAAI,CAACW,YAAY,GAAGX,IAAI,CAACW,YAAa;MAClF;MACA;MACA,IAAGN,SAAS,KAAK,EAAE,EAAC;QAChBA,SAAS,GAAG,IAAI,GAAGA,SAAS,GAAG,GAAG;MACtC;MACA;MACAQ,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,CAACC,KAAK,GAAGV,SAAS;IAE7D,CAAC,MAAM;MACHQ,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,CAACC,KAAK,GAAG,EAAE;IACtD;;IAEA;IACAF,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,KAAK,GAAGf,IAAI,CAACgB,QAAQ;IACzDH,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC,CAACC,KAAK,GAAGX,IAAI;IAC/C;IACAS,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC,CAACG,KAAK,EAAE;EAE5D,CAAC;EAED,oBACI;IAAA,uBACI,QAAC,YAAY;MACT,SAAS,EAAC,WAAW;MACrB,SAAS;MACT,UAAU,EAAElB;IAAS;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC1B;AAEd,CAAC;AAAC,KA3DIF,IAAI;AA6DV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}